爆内存和爆栈
实际上 在java程序运行时 内存容量不可能是无限的 当我们的对象创建过多或是数组容量过大时 就会导致我们的堆内存不足以存放更多新的对象或是数组 这时就会出现错误 比如:
                    public class Main {

                        public static void main(String[] args) {

                            int[] a = new int[Integer.MAX_VALUE];

                        }

                    }

这里我们申请了一个容量为21亿多的int型数组 显然 如此之大的数组不可能在我们的堆内存中 所以程序运行时就还这样:
                    Exception in thread "main" java.lang.OutOfMemoryError: Requested array size exceeds VM limit
                    	at com.test3.Main.main(Main.java:10)

这里得到了一个OutOfMemoryError错误 也就是我们常说的内存溢出错误 我们可以通过参数来控制堆内存的最大值和最小值:
                    -Xms最小值     -Xmx最大值

比如我们现在限制堆内存为固定值1M大小 并且在抛出内存溢出异常保存当前的内存堆转储快照:
                    运行/测试配置 -> 添加VM选项 -> -Xms1m -Xmx1m -XX:+HeapDumpOnOutOfMemoryError

注意: 堆内存不要设置大小 不然连虚拟机都不足以启动 接着我们编写一个一定会导致内存内存溢出的程序:
                    static class Test { }

                    public static void main(String[] args) {

                        List<Test> list = new ArrayList<>();
                        while (true) {
                            list.add(new Test());
                        }

                    }

在程序运行之后:
                    java.lang.OutOfMemoryError: Java heap space
                    Dumping heap to java_pid3848.hprof ...
                    Heap dump file created [2611224 bytes in 0.009 secs]
                    Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
                    	at java.util.Arrays.copyOf(Arrays.java:3210)
                    	at java.util.Arrays.copyOf(Arrays.java:3181)
                    	at java.util.ArrayList.grow(ArrayList.java:267)
                    	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:241)
                    	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:233)
                    	at java.util.ArrayList.add(ArrayList.java:464)
                    	at com.test3.Main.main(Main.java:16)

可以看到错误出现原因正是Java heap space 也就是堆内存满了 并且根据我们设定的VM参数 堆内存保存了快照信息 我们可以在IDEA内置的Profiler中进行查看

可以很明显地看到 在创建了31619个Test对象之后 堆内存蚌埠住了 于是就抛出了内存溢出错误

我们接着来看栈溢出 我们知道 虚拟机栈会在方法调用时插入栈帧 那么 设想如果出现无限递归的情况呢:
                    public static void test() {
                            test();
                        }

                    public static void main(String[] args) {

                        test();

                    }

这很明显是一个永无休止的程序 并且会不断继续向下调用test方法本身 那么按照我们之前的逻辑推导 无限地插入栈帧那么一定会将虚拟机栈塞满 所以 当栈的深度已经不足以继续插入栈帧时 就会这样
                    Exception in thread "main" java.lang.StackOverflowError
                    	at com.test3.Main.test(Main.java:9)
                    	at com.test3.Main.test(Main.java:9)
                    	at com.test3.Main.test(Main.java:9)
                    	at com.test3.Main.test(Main.java:9)
                    	at com.test3.Main.test(Main.java:9)
                    	at com.test3.Main.test(Main.java:9)
                    	....以下省略很多行

这也是我们常说的栈溢出 它和堆溢出比较类似 也是由于容纳不下才导致的 我们可以使用-Xss来设定栈容量